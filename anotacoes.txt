@import '~@angular/material/theming';

$custom-app-primary: define-palette($blue-palette);
$custom-app-secondary: define-palette($indigo-palette, A200, A400, 700);
$custom-app-warn: define-palette($red-palette);

$custom-theme: define-light-theme((
  color: (
    primary: $custom-app-primary,
    accent: $custom-app-secondary,
    warn: $custom-app-warn
  )
));

@include all-component-themes($custom-theme);

html, body {
  height: 100%;
}

body {
  margin: 0;
  font-family: Roboto, "Helvetica Neue", sans-serif;
}


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

@use '@angular/material';

$custom-app-primary: material.define-palette(material.$blue-palette);
$custom-app-secondary: material.define-palette(material.$indigo-palette, A200, A400, 700);
$custom-app-warn: material.define-palette(material.$red-palette);

$custom-theme: material.define-light-theme((
  color: (
    primary: $custom-app-primary,
    accent: $custom-app-secondary,
    warn: $custom-app-warn
  )
));


@include material.all-component-themes($custom-theme);

html, body {
  height: 100%;
}

body {
  margin: 0;
  font-family: Roboto, "Helvetica Neue", sans-serif;
}


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


<mat-card>
  <mat-toolbar color="primary">Cursos Disponíveis</mat-toolbar>

  <div *ngIf="courses$ | async as courses; else loading">
    <table mat-table [dataSource]="courses" class="mat-elevation-z8">
      <!-- Name Column -->
      <ng-container matColumnDef="name">
        <th mat-header-cell *matHeaderCellDef>Curso.</th>
        <td mat-cell *matCellDef="let course">{{ course.name }}</td>
      </ng-container>

      <!-- Category Column -->
      <ng-container matColumnDef="category">
        <th mat-header-cell *matHeaderCellDef>Categoria</th>
        <td mat-cell *matCellDef="let course">{{ course.category }}
          <mat-icon aria-hidden="false" aria-label="Categoria do Curso" fontIcon="{{course.category | category}}"></mat-icon>
        </td>
      </ng-container>

      <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
      <tr mat-row *matRowDef="let row; columns: displayedColumns"></tr>
    </table>
  </div>

  <ng-template #loading>
    <div class="loading-spinner">
      <mat-spinner></mat-spinner>
    </div>
  </ng-template>
</mat-card>


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

<mat-card>
  <table mat-table [dataSource]="courses$" class="mat-elevation-z8">
    <mat-toolbar color="primary">Cursos Disponíveis</mat-toolbar>

    <div *ngIf="courses$ | async as courses; else loading">
      <table mat-table [dataSource]="courses" class="mat-elevation-z8">
        <!-- Name Column -->
        <ng-container matColumnDef="name">
          <th mat-header-cell *matHeaderCellDef>Curso.</th>
          <td mat-cell *matCellDef="let course">{{ course.name }}</td>
        </ng-container>

        <!-- Category Column -->
        <ng-container matColumnDef="category">
          <th mat-header-cell *matHeaderCellDef>Categoria</th>
          <td mat-cell *matCellDef="let course">
            {{ course.category }}
            <mat-icon
              aria-hidden="false"
              aria-label="Categoria do Curso"
              fontIcon="{{ course.category | category }}"
            ></mat-icon>
          </td>
        </ng-container>

        <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
        <tr mat-row *matRowDef="let row; columns: displayedColumns"></tr>
      </table>
    </div>

    <ng-template #loading>
      <div class="loading-spinner">
        <mat-spinner></mat-spinner>
      </div>
    </ng-template>
  </table>
</mat-card>



---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

<mat-icon aria-hidden="false" aria-label="Categoria do Curso">{{ course.category | category }}</mat-icon>

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

import { CoursesComponent } from './courses/courses.component';
import { CourseFormComponent } from './course-form/course-form.component';

const routes: Routes = [
  { path: '', component: CoursesComponent },
  { path: 'new', component: CourseFormComponent }
];


@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class CoursesRoutingModule {}


import { RouterModule, Routes } from '@angular/router';

export const routes: Routes = [
  { path: '', pathMatch: 'full', redirectTo: 'courses' },
  { path: 'courses', loadChildren: () => import('./courses/courses.module').then(onfulfilled: m => m.CoursesComponent) }
];

@NgModule(obj: {
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})

export class AppRoutingModule { }



IMPORTANTE: 

Eliminação de CoursesRoutingModule

O arquivo courses-routing.module.ts não será mais necessário, porque o roteamento será centralizado em app.routes.ts.
Correção em app.routes.ts

Altere a configuração para usar loadComponent ao invés de loadChildren. Isso é mais adequado ao uso de standalone components.
Standalone Components

Certifique-se de que CoursesComponent e CourseFormComponent estejam marcados como standalone: true.


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Course c2 = new Course();
c2.setName("Angular framework");
c2.setCategory(Category.FRONT_END);

Lesson l2 = new Lesson();
l2.setName("Estrutura de diretórios com Angular");
l2.setYoutubeUrl("https://youtube.com/aula1");
l2.setCourse(c2);

c2.getLessons().add(l2);
courseRepository.save(c2);

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

<plugin>
	<groupId>org.flywaydb</groupId>
	<artifactId>flyway-maven-plugin</artifactId>
	<version>11.3.0</version> 
	<configuration>
		<url>jdbc:mysql://crud_spring_mysql:3306/courses</url>
		<user>myuser</user>
		<password>${SPRING_DATASOURCE_PASSWORD}</password>
		<driver>com.mysql.cj.jdbc.Driver</driver>  
	</configuration>
</plugin>

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ENTRYPOINT ["java", "-jar", "/app/crud-spring-0.0.1-SNAPSHOT.jar"]

ENTRYPOINT ["sh", "-c", "java -jar /app/crud-spring-0.0.1-SNAPSHOT.jar"]

ENTRYPOINT ["sh", "-c", "chmod +x /app/crud-spring-0.0.1-SNAPSHOT.jar && java -jar /app/crud-spring-0.0.1-SNAPSHOT.jar"]

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Hibernate settings
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update

# Docker Compose
spring.docker.compose.file=./docker-compose.yml

# MySQL connection settings
spring.datasource.url=jdbc:mysql://mysql:3306/courses
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=myuser
spring.datasource.password=${DB_PASSWORD}

# Migration settings
spring.flyway.enabled=true
spring.flyway.baseline-on-migrate=true

--------------------------------------------------------------------

# MySQL connection settings
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}

# Hibernate settings
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update

# Migration settings
spring.flyway.enabled=true
spring.flyway.baseline-on-migrate=true

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

cat: /run/secrets/db_password: No such file or directory
nathan-paiva@ubuntu:~/Documents/programming/projects/java/crud-angular-spring/crud-spring$ 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

services:
  db:
    image: mysql:8.0
    restart: always
    container_name: mysql
    environment:
      MYSQL_USER: myuser
      MYSQL_DATABASE: courses
      MYSQL_PASSWORD_FILE: /run/secrets/db_password
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
    ports:
      - '3306'
    volumes:
      - db_volume:/var/lib/mysql
    secrets:
      - db_password
      - db_root_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 5
      start_period: 5s

  backend:
    build: .
    image: spring-api
    container_name: backend
    env_file:
      - ./.env
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/courses
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_FLYWAY_ENABLED: true
    depends_on:
      db:
        condition: service_healthy
    ports:
      - '8080:8080'
    volumes:
      - ./target:/app

secrets:
  db_password:
    file: ./secrets/db_password.txt
  db_root_password:
    file: ./secrets/db_root_password.txt

volumes:
  db_volume: {}

----------------------------------------------------------------------------

services:
  db:
    image: mysql:8.0
    restart: always
    container_name: mysql
    env_file:
      - ./.env
    environment:
      MYSQL_DATABASE: courses
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    ports:
      - '3306:3306'
    volumes:
      - db-volume:/var/lib/mysql
    networks:
      - spring-mysql

  backend:
    build: .
    image: spring-api
    restart: always
    container_name: backend
    depends_on:
      - db
    ports:
      - '8080:8080'
    volumes:
      - ./target:/app
    env_file:
      - ./.env
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/courses
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_FLYWAY_ENABLED: true
    networks:
      - spring-mysql

volumes:
  db-volume: {}

networks:
  spring-mysql:
    driver: bridge

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
